swagger: '2.0'
info:
  title: Popsical API
  version: "2"

  description: |
    Version 2
    --

    all endpoints path must be prefixed with `/v2`

    e.g https://api.popsical.tv/v2/genres.json

    Authentication
    --------------

    Popsical API uses OAuth2 to issue access token.

    All apps/client needs to be registered in order to access Popsical API endpoints.

    Once registered, you will receive

    `client_id` - Api Key as identifier of your app

    `secret` - Secret Key

    `callback_url` - as specified by client

    Pagination
    ---------

    Resources with meta object indicates the resource endpoint has pagination. For example the following:

    ```JSON
    {
      "resources": [],
      ..
      ..
      "meta": {
        "total": 3,
        "current_page": 1,
        "num_pages": 1,
        "per_page": 25
      }
    }
    ```


    `total` - total entries of items.

    `current_page` - the current page.

    `per_page` - load number of items per page. Default is set to 25 items.

    `num_pages` - number of pages available to paginate.


    You can use the following query paramters to paginate the resource and load 4 items per page

    `/v1/resources.json?per_page=4&page=2`


    Errors
    ------

    A failed call will always result in either HTTP status code of >= 400 or 500. Failed JSON requests will also contain a response containing an error message and error code:

    ```JSON
      { error: 'not found', err_code: 1404 }
    ```

    Code defensively and do not assume err_code will always be present. If you get a return without a err_code please tell us so that we can include one.


    Custom err_code
    ------------------

    1400 - missing parameters

    1404 - not found error

    1401 - not authorized

    1403 - forbidden

    1407 - entity validation error e.g uniqueness (value already taken), presence validation errors

    1408 - TV IP address is not available

    1409 - Play token generation failed

    1410 - Play token authorization failed

    1411 - Language code does not exist

    1412 - Track already exist in play queue.

    1413 - TV Device ID is missing

    1500 - Internal server error

    Search
    ------

    We use algolia for search. Please refer to algolia API docs to perform search https://www.algolia.com/doc/rest-api/search/

    Requires Algolia API key to perform search.

# the domain of the service
host: api-staging.popsical.tv
# array of all schemes that your API supports
schemes:
  - https

# will be prefixed to all paths
basePath: /v2

securityDefinitions:
  OauthSecurity:
    type: oauth2
    flow: accessCode
    authorizationUrl: 'https://api-staging.popsical.tv/oauth/authorize'
    tokenUrl: 'https://api-staging.popsical.tv/oauth/token'
    scopes:
      public: "all public access"
      manage: "user resources"
      remote_mode: "device use as remote control for the TV"

produces:
  - application/json

consumes:
  - application/json

paths:
  /genres.json:
    get:
      summary: Lookup available genres
      description: |
        Returns all valid genres in collection
      tags:
        - Genre
        - Meta
      parameters:
        - $ref: '#/parameters/playlistLangParams'
      responses:
        200:
          description: Object with genres array & meta pagination information
          schema:
            type: object
            properties:
              playlists:
                type: array
                items:
                  $ref: '#/definitions/Genre'
              meta:
                $ref: '#/definitions/Pagination'

definitions:
  Genre:
    type: object
    properties:
      name:
        type: string
        description: genre name
        example: rock
      poster_url:
        type: string
        description: poster URL
        example: https://charaku.imgix.net/defaults/genre_bg/rock.jpg?auto=compress
      icon_url:
        type: string
        example: https://charaku.imgix.net/defaults/genre_icons/ic_rock.png?auto=compress
      genre_langs:
        type: object
        properties:
          en:
            type: string
            description: genre lang code with genre name
            example: Rock
          zh:
            type: string
            description: genre lang code with genre name
            example: 摇滚
          zt:
            type: string
            description: genre lang code with genre name
            example: 搖滾

  Pagination:
    type: object
    properties:
      meta:
        type: object
        properties:
          total:
            type: integer
            description: Total number of items
          current_page:
            type: integer
            description: Current page
          num_pages:
            type: integer
            description: Total of number of pages available to paginate
          per_page:
            type: integer
            description: Number of items available per page

  Success:
    type: object
    properties:
      success:
        type: string
        description: Success
        example: ok
  Error:
    type: object
    properties:
      errors:
        type: string
        description: Not authorized
      err_code:
        type: integer
        description: refer to internal error codes

  ErrorUnauthorized:
    type: object
    properties:
      errors:
        type: string
        description: Not authorized
        example: Not authorized
      err_code:
        type: integer
        description: refer to internal error codes
        example: 1401

  ErrorForbidden:
    type: object
    properties:
      errors:
        type: string
        description: Forbidden
        example: forbidden
      err_code:
        type: integer
        description: refer to internal error codes
        example: 1403

  ErrorNotFound:
    type: object
    properties:
      errors:
        type: string
        description: Not found
        example: not found
      err_code:
        type: integer
        description: refer to internal error codes
        example: 1404

  ErrorUnprocessable:
    type: object
    properties:
      errors:
        type: string
        description: Model validation error
        example: not found
      err_code:
        type: integer
        description: refer to internal error codes
        example: 1407

# define reusable parameters:
parameters:
  perPageParams:
    name: per_page
    in: query
    description: Number of playlist returned
    type: integer
    required: false
  pageParams:
    name: page
    in: query
    description: Page number
    type: integer
    required: false
  playlistIncludesParams:
    name: includes
    in: query
    description: Eager load tracks in each playlist. e.g `includes=tracks`
    type: string
    required: false
  playlistLangParams:
    name: lang
    in: query
    description: language code e.g `en`, `ms`, `zh`
    type: string
    required: false
  playlistGenreParams:
    name: genres
    in: query
    description: genres e.g `pop`, `rock`, `rap`, `jazz`
    type: string
    required: false
  playlistArtistParams:
    name: artist_gender
    in: query
    description: valid values e.g 'm', 'f', 'mixed'
    required: false
    type: string
  includeBodyParams:
    name: include_body
    in: query
    description: Return play_queue body in response
    type: boolean
    required: false